[33m
[INFO] Beginning self-labelling[0m
[32m
EPOCH 1/10[0m
[32m------------------------------------------------------------[0m
[Batch]    0/6250 - [Accuracy] 1.0000 - [CE Loss] 2.9223
{0: 1}
[Batch]  625/6250 - [Accuracy] 1.0000 - [CE Loss] 2.9223
{0: 1}
[Batch] 1250/6250 - [Accuracy] 1.0000 - [CE Loss] 2.9223
{0: 1}
[Batch] 1875/6250 - [Accuracy] 1.0000 - [CE Loss] 2.9223
{0: 1}
Traceback (most recent call last):
  File "main.py", line 74, in <module>
    scan_model.train_self_labelling(epochs=args['self_labelling_epochs'], threshold=args['threshold'])
  File "/home/nishant/Desktop/Desktop/Papers2code/Implementations/SCAN/scripts/scan.py", line 343, in train_self_labelling
    acc, loss = self.train_supervised(best_head)
  File "/home/nishant/Desktop/Desktop/Papers2code/Implementations/SCAN/scripts/scan.py", line 282, in train_supervised
    augment_probs = self.model(X_aug, forward_pass='branch_{}'.format(best_head))
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/nishant/Desktop/Desktop/Papers2code/Implementations/SCAN/scripts/models.py", line 100, in forward
    out = self.branches[idx](x)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/container.py", line 117, in forward
    input = module(input)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/nishant/Desktop/Desktop/Papers2code/Implementations/SCAN/scripts/models.py", line 276, in forward
    features = self.contrastive_head(self.backbone(x))
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/container.py", line 117, in forward
    input = module(input)
KeyboardInterrupt
